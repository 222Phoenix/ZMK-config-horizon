/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/pointing.h>
#include <behaviors/mouse_keys.dtsi>
#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <dt-bindings/zmk/ext_power.h>

#define MS_L &mmv MOVE_LEFT
#define MS_D &mmv MOVE_DOWN
#define MS_U &mmv MOVE_UP
#define MS_R &mmv MOVE_RIGHT

&mmv_input_listener {
            sniping {
                    layers = <6>;
                    input-processors = <&zip_xy_scaler 1 4>; // 1/4 sniping speed lyr6
                    layers = <2>;
                    input-processors = <&zip_xy_scaler 2 1>; // 2x speed lyr2
            };            
        };

&mmv { //mousekey faster than default, 0 0 150 10 good general settings
    acceleration-exponent=<0>;    //0
    delay-ms=<0>;                 //0
    time-to-max-speed-ms = <150>; //150 
    trigger-period-ms = <10>;     //10 
};

#define SCR_L &msc SCRL_LEFT
#define SCR_D &msc SCRL_DOWN
#define SCR_U &msc SCRL_UP
#define SCR_R &msc SCRL_RIGHT

#define CAD &kp LC(LA(DEL))
#define CAT &kp LC(LA(TAB))

#define COPPST &hold_tap LC(V) LC(C)
#define SENT   &hold_tap LSHFT ENTER
#define SLCN   &hold_tap LS(SEMI) SEMI
#define SLSH   &hold_tap QMARK SLASH
#define QUOTE  &hold_tap LS(APOS) APOS

#define BTBLE &out OUT_BLE 
#define BTCLR &bt BT_CLR
#define BTCLRA &bt BT_CLR_ALL
#define BTUSB &out OUT_USB
#define BT1 &bt BT_SEL 1 
#define BT2 &bt BT_SEL 2 
#define BT3 &bt BT_SEL 3
#define BT4 &bt BT_SEL 4
#define BT5 &bt BT_SEL 5
#define LYR3 &mo_m 3 0
#define LYR4 &mo_to 4 0 
#define vold &kp C_VOL_DN 
#define volu &kp C_VOL_UP
#define CHRG &ext_power EP_TOG

//&soft_off { //config to only turn off it the key is held for 0.5 seconds or longer.
//    hold-time-ms = <500>; //not used, currently instant
//};

&lt {
    tapping-term-ms = <180>;
    flavor = "tap-preferred";
};

//sticky keys sticky keys sticky keys sticky keys sticky keys sticky keys sticky keys sticky keys sticky keys sticky keys sticky keys sticky keys 

&sk {
    release-after-ms = <2000>; //hold 2 sec if no other key pressed
    quick-release; //deactivate sk on the next key being pressed
};

//tap dance tap dance tap dance tap dance tap dance tap dance tap dance tap dance tap dance tap dance tap dance tap dance tap dance tap dance tap dance
//tap & double tap 

/ {
    behaviors {
        tdltb: tap_dance_ltb {                                 //left tab
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&hold_tap LA(LEFT) LS(COMMA)>, <&kp LC(LS(TAB))>;
        };
        tdrtb: tap_dance_rtb {                                 //right tab
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&hold_tap LA(RIGHT) LS(DOT)>, <&kp LC(TAB)>;
        };
        tdmck: tap_dance_mck {                                 //mclick
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&hold_tap_clk 7 MCLK>, <&kp LC(LS(T))>;
        };
        tdrck: tap_dance_rck {                                 //rclick
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&hold_tap_clk 1 RCLK>, <&kp LC(W)>;
        };        
        tdlpar: tap_dance_lpar {                                //lpar
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp LPAR>, <&kp LBRC>, <&kp LBKT>, <&kp LT>;
        };
        tdrpar: tap_dance_rpar {                                //rpar
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp RPAR>, <&kp RBRC>, <&kp RBKT>, <&kp GT>;
        };

    };
};

//custom hold tap custom hold tap custom hold tap custom hold tap custom hold tap custom hold tap custom hold tap custom hold tap custom hold tap
//hold and tap

/ {
    behaviors { //hold tap for regular keycodes
        hold_tap: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
        };
        hold_tap_clk: hold_tap_clk { //hold mo, tap mouse button
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            bindings = <&mo>, <&mkp>;
        };
        mo_m: mo_m { //hold mo, tap macro
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>; 
            bindings = <&mo>, <&l3>;
            };
        mo_to: behavior_mo_to { //hold mo, tap to
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <300>;
            bindings = <&mo>, <&to>;
        };

  };
}; 

//mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod
//normal, with mod

/ {
    behaviors {
        asp: asp { //ctrl A is ctrl A & C, copy all
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp A>, <&ctrla>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
            keep-mods = <(MOD_LCTL)>;
        };
        ms_ll: ms_ll { //ctrl ms_l to save
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <MS_L>, <&ctrls>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };        
        quot: quot { //shift quot is quote macro, quote quote left
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <QUOTE>, <&quotm>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };        
        rck: rck { //ctrl rclick is ctrl l and exit nav lyr
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&tdrck>, <&crck>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
        slsh: slsh { //shift slsh is fwd slsh
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <SLSH>, <&slshm>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };        
        scru: scru { //ctrl scrollup is ctrl t for new tab
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <SCR_U>, <&ctrlt>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
        scruu: scruu { //ctrl sft scrollup is ctrl sft t to reopen tab
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&scru>, <&ctrlst>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

    };
};

//macros macros macros macros macros macros macros macros macros macros macros macros macros macros macros macros macros macros macros macros macros 

/ {
macros {
    copysp: copysp {
//        label = "copysp";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <40>;
	    tap-ms = <40>;
        bindings
            = <&macro_press &kp LCTRL>,
              <&macro_tap &kp C &kp L &kp V &kp A &kp C>,
              <&macro_release &kp LCTRL>;
    };
    crck: crck {
//        label = "crck";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&to 0>,
              <&macro_press &kp LCTL>,
              <&macro_tap &kp L>,
              <&macro_release &kp LCTL>;
    };  
    ctrla: ctrla {
//        label = "ctrla";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTL>,
              <&macro_tap &kp A &kp C>,
              <&macro_release &kp LCTL>;
    }; 
    ctrls: ctrls {
//        label = "ctrls";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTL>,
              <&macro_tap &kp S>,
              <&macro_release &kp LCTL>;
    }; 
    ctrlst: ctrlst {
//        label = "ctrlst";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTL>,
              <&macro_press &kp LSFT>,
              <&macro_tap &kp T>,
              <&macro_release &kp LSFT>,
              <&macro_release &kp LCTL>;
    };     
    ctrlt: ctrlt {
//        label = "ctrlt";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&to 0>,
              <&macro_press &kp LCTL>,
              <&macro_tap &kp T>,
              <&macro_release &kp LCTL>;
    };     
    dashm: dashm {
//        label = "dashm";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &mkp LCLK &kp RIGHT &kp RIGHT &kp MINUS &kp TAB>;
    };
    find: find {
//        label = "find";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <40>;
        tap-ms = <40>;
        bindings
            = <&macro_press &kp LCTL>,
              <&macro_tap &kp F &kp A &kp V &kp A>,
              <&macro_release &kp LCTL>;
    }; 
    l3: l3 {
//        label = "l3";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&to 0>, 
              <&kp BSPC>;
    }; 
    parn: parn {
//        label = "parn";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <40>;
        tap-ms = <40>;
        bindings
            = <&macro_tap &kp LPAR &kp RPAR &kp LEFT>;
    }; 
    quotm: quotm {
//        label = "quotm";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LSFT>,
              <&macro_tap &kp LS(APOS) &kp LS(APOS)>,
              <&macro_wait_time 100>,
              <&macro_release &kp LSFT>,
              <&macro_tap &kp LEFT>;
    };
    slshm: slshm {
//        label = "slshm";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp BSLH>;
    };  
  };
};

//combos combos combos combos combos combos combos combos combos combos combos combos combos combos combos combos combos combos combos combos combos 

/ {
    combos {
        compatible = "zmk,combos";
        combo_cat {
            timeout-ms = <175>;
            key-positions = <0 1>;
            bindings = <&kp LC(LA(TAB))>;
        };      
        combo_cbspc {
            timeout-ms = <175>;
            key-positions = <10 11>;
            bindings = <&kp LC(BSPC)>;
        };
        combo_cbspc2 {
            timeout-ms = <175>;
            key-positions = <22 23>;
            bindings = <&kp LC(BSPC)>;
        };          
        combo_copy {
            timeout-ms = <175>;
            key-positions = <26 27>;
            bindings = <&kp LC(C)>;
        };  
        combo_cpys {
            timeout-ms = <175>;
            key-positions = <26 27 28>;
            bindings = <&copysp>;
        };
        combo_ctrlw {
            timeout-ms = <175>;
            key-positions = <1 2>;
            bindings = <&kp LC(W)>;
        };              
        combo_del {
            timeout-ms = <175>;
            key-positions = <28 29>;
            bindings = <&kp DEL>;
        };   
        combo_esc {
            timeout-ms = <175>;
            key-positions = <34 35>;
            layers = <2>;           //only on layer 2
            bindings = <&kp ESC>;
        };       
        combo_esc2 {
            timeout-ms = <175>;
            key-positions = <15 43>;
            bindings = <&kp ESC>;
        }; 
        combo_find {
            timeout-ms = <175>;
            key-positions = <15 16>;
            bindings = <&find>;
        };
        combo_mute {
            timeout-ms = <175>;
            key-positions = <42 47>;
            bindings = <&kp C_MUTE>;
        };    
        combo_mute2 {
            timeout-ms = <175>;
            key-positions = <43 46>;
            bindings = <&kp C_MUTE>;
        };                  
        combo_parn {
            timeout-ms = <175>;
            key-positions = <1 10>;
            bindings = <&parn>;
        };
        combo_paste {
            timeout-ms = <175>;
            key-positions = <27 28>;
            bindings = <&kp LC(V)>;
        }; 
        combo_pgdn {
            timeout-ms = <175>;
            key-positions = <33 34>;
            layers = <2>;           //only on layer 2
            bindings = <&kp PG_DN>;
        };
        combo_pgup {
            timeout-ms = <175>;
            key-positions = <35 36>;
            layers = <2>;           //only on layer 2
            bindings = <&kp PG_UP>;
        };
        combo_reset {
            timeout-ms = <175>;
            key-positions = <0 11>;
            bindings = <&bootloader>;
        }; 
        combo_save {
            timeout-ms = <175>;
            key-positions = <13 14 15>;
            bindings = <&kp LC(S)>;
        };
        combo_scrd {
            timeout-ms = <175>;
            key-positions = <16 17>;
            bindings = <SCR_D>;
        };   
        combo_scru {
            timeout-ms = <175>;
            key-positions = <4 5>;
            bindings = <SCR_U>;
        }; 
        combo_soft {
            timeout-ms = <175>;
            key-positions = <9 10 11>;
            bindings = <&soft_off>;
        };
        combo_under {
            timeout-ms = <175>;
            key-positions = <32 33>;
            bindings = <&kp UNDER>;
        };  
    };
};

//conditional layers conditional layers conditional layers conditional layers conditional layers conditional layers conditional layers conditional layers 

/ {
    conditional_layers { //tri layer
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <3 4>;
            then-layer = <5>;
        };
    };
};

//keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap 

/ {
    keymap {
        compatible = "zmk,keymap";

        0 { //default
            bindings = <
                &kp TAB    &kp Q      &kp W      &kp E      &kp R      &kp T                            &kp Y      &kp U      &kp I      &kp O      &kp P      &kp BSPC
                &sk LSHFT  &asp       &kp S      &kp D      &kp F      &kp G                            &kp H      &kp J      &kp K      &kp L      SLCN       &quot
                &sk LCTRL  &kp Z      &kp X      &kp C      &kp V      &kp B      &trans     &trans     &kp N      &kp M      &kp COMMA  &kp DOT    &slsh      SENT
                &trans     &trans     &trans     &trans     LYR4       LYR3       &trans     &trans    &lt 2 SPACE &to 2      &none      &none      &none      &none
            >;
        };

        1 { //blank, not used
            bindings = <
                &trans     &trans     &trans     &trans     &trans     &trans                           &trans     &trans     &trans     &trans     &trans     &trans
                &trans     &trans     &trans     &trans     &trans     &trans                           &trans     &trans     &trans     &trans     &trans     &trans
                &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans
                &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans                 
            >;
        };

        2 { //mousekeys
            bindings = <
                &trans     &trans     &trans     MS_U       &trans     &scruu                           &trans     &tdltb     COPPST     &tdrtb     &trans     &trans
                &trans     &to 6      &ms_ll     MS_D       MS_R       SCR_D                            &trans     &mkp LCLK  &tdmck     &rck       &kp PSCRN  &trans
                &trans     &trans     vold       volu       &trans     &dashm     &trans     &trans     &kp PG_UP  &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &trans
                &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &mo 6      &trans     &trans     &trans     &trans                 
            >;
        };        

        3 { //numpad & f-row
            bindings = <
                &kp F1     &kp F2     &kp F3     &kp F4     &kp F5     &kp F6                           &trans     &kp N7     &kp N8     &kp N9     &kp MINUS  &trans
                &kp F7     &kp F8     &kp F9     &kp F10    &kp F11    &kp F12                          &trans     &kp N4     &kp N5     &kp N6     &kp PLUS   &trans
                &trans     &trans     &trans     &trans     &trans     &dashm     &trans     &trans     &trans     &kp N1     &kp N2     &kp N3     &kp EQUAL  &trans
                &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &kp N0     &kp N0     &trans     &trans     &trans     &trans     
            >;
        };

        4 { //symbols
            bindings = <
                CAT        &tdlpar    &trans     CAD        &trans     &trans                           &trans     &kp KP_NUM &kp CAPS   &kp SLCK   &tdrpar    &trans
                &kp TILDE  &kp EXCL   &kp AT     &kp HASH   &kp DLLR &kp PRCNT                          &kp CARET  &kp AMPS   &kp ASTRK  &trans     &trans     &trans
                &trans     &sk LGUI   &sk LALT   &trans     &trans     &dashm     &trans     &trans     &trans     &trans     &trans     &kp LG(DOT) &trans    &kp LA(ENTER)
                &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans
            >;
        };

        5 { //BT config
            bindings = <
                CHRG       &trans     &trans     &trans     &trans     &trans                           &trans     BTUSB      &trans     &trans     &trans     &soft_off
                &trans     BTCLRA     &trans     &trans     &trans     &trans                           &trans     BT1        BT2        BT3        BT4        BT5 
                &trans     &trans     &trans     BTCLR      &trans     BTBLE      &trans     &trans     &trans     BT1        BT2        BT3        BT4        BT5
                &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans
            >;
        };

        6 { //slow mousekeys
            bindings = <
                &trans     &trans     &trans     MS_U       &trans     &scruu                           &trans     &tdltb     COPPST     &tdrtb     &trans     &trans
                &trans     &to 2      &ms_ll     MS_D       MS_R       SCR_D                            &trans     &mkp LCLK  &tdmck     &rck       &kp PSCRN  &trans
                &trans     &trans     vold       volu       &trans     &dashm     &trans     &trans     &kp PG_UP  &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &trans
                &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans                 
            >;
        };  

        7 { //4 way scrolling
            bindings = <
                &trans     &trans     &trans     SCR_U      &trans     &scruu                           &trans     &tdltb     COPPST     &tdrtb     &trans     &trans
                &trans     &trans     SCR_L      SCR_D      SCR_R      SCR_D                            &trans     &mkp LCLK  &tdmck     &rck       &kp PSCRN  &trans
                &trans     &trans     vold       volu       &trans     &dashm     &trans     &trans     &kp PG_UP  &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &trans
                &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans                 
            >;
        };  

    };
};
