/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/pointing.h>
#include <behaviors/mouse_keys.dtsi>

#define MS_L &mmv MOVE_LEFT
#define MS_D &mmv MOVE_DOWN
#define MS_U &mmv MOVE_UP
#define MS_R &mmv MOVE_RIGHT

#define SCR_L &msc SCRL_LEFT
#define SCR_D &msc SCRL_DOWN
#define SCR_U &msc SCRL_UP
#define SCR_R &msc SCRL_RIGHT

#define CAD &kp LC(LA(DEL))
#define CAT &kp LC(LA(TAB))

#define COPPST &hold_tap LC(V) LC(C)
#define SLCN   &hold_tap LS(SEMI) SEMI
#define QUOTE  &hold_tap LS(APOS) APOS
#define SLSH   &hold_tap QMARK SLASH
#define SENT   &hold_tap LSHFT ENTER

//&soft_off {
//    hold-time-ms = <500>; // Only turn off it the key is held for 0.5 seconds or longer.
//};

&lt {
    tapping-term-ms = <180>;
    flavor = "tap-preferred";
};

//mo_to, momentary 3 and 4, tap to get back to 0

/ {
    behaviors {
        mo_to: behavior_mo_to {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&to>;
        };
    };
};

//tap dance tap dance tap dance tap dance tap dance tap dance tap dance tap dance tap dance tap dance tap dance tap dance tap dance tap dance tap dance
//tap & double tap 

/ { //done
    behaviors {
        tdltb: tap_dance_ltb {                                 //left tab
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&hold_tap LA(LEFT) LS(COMMA)>, <&kp LC(LS(TAB))>;
        };
        tdrtb: tap_dance_rtb {                                 //right tab
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&hold_tap LA(RIGHT) LS(DOT)>, <&kp LC(TAB)>;
        };
        tdmck: tap_dance_mck {                                 //mclick
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&hold_tap_clk 1 MCLK>, <&kp LC(LS(T))>;
        };
        tdrck: tap_dance_rck {                                 //rclick
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&hold_tap_clk 1 RCLK>, <&kp LC(W)>;
        };        
        tdlpar: tap_dance_lpar {                                //lpar
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp LPAR>, <&kp LBRC>, <&kp LBKT>, <&kp LT>;
        };
        tdrpar: tap_dance_rpar {                                //rpar
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp RPAR>, <&kp RBRC>, <&kp RBKT>, <&kp GT>;
        };

    };
};

//custom hold tap custom hold tap custom hold tap custom hold tap custom hold tap custom hold tap custom hold tap custom hold tap custom hold tap
//hold and tap

/ {
    behaviors {
        hold_tap: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
        };
        hold_tap_clk: hold_tap_clk {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            bindings = <&mo>, <&mkp>;
        };

 };
};

//mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod morph mod
//normal, with mod

/ {
    behaviors {
        asp: asp {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp A>, <&ctrla>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
            keep-mods = <(MOD_LCTL)>;
        };
        quot: quot {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <QUOTE>, <&quotm>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        slsh: slsh {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <SLSH>, <&slshm>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };        

    };
};

//macros macros macros macros macros macros macros macros macros macros macros macros macros macros macros macros macros macros macros macros macros 

/ {
macros {

    copysp: copysp {
        label = "copysp";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <40>;
	    tap-ms = <40>;
        bindings
            = <&macro_press &kp LCTRL>,
              <&macro_tap &kp C &kp L &kp V &kp A &kp C>,
              <&macro_release &kp LCTRL>;
    };
    dashm: dashm {
        label = "dashm";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &mkp LCLK &kp RIGHT &kp RIGHT &kp MINUS &kp TAB>;
    };
    quotm: quotm {
        label = "quotm";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LSFT>,
              <&macro_tap &kp LS(APOS) &kp LS(APOS)>,
              <&macro_wait_time 100>,
              <&macro_release &kp LSFT>,
              <&macro_tap &kp LEFT>;
    };
    slshm: slshm {
        label = "slshm";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp BSLH>;
    };            
    ctrla: ctrla {
        label = "ctrla";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTL>,
              <&macro_tap &kp A &kp C>,
              <&macro_release &kp LCTL>;
    }; 
    find: find {
        label = "find";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <40>;
        tap-ms = <40>;
        bindings
            = <&macro_press &kp LCTL>,
              <&macro_tap &kp F &kp A &kp V &kp A>,
              <&macro_release &kp LCTL>;
    }; 

  };
};

//combos combos combos combos combos combos combos combos combos combos combos combos combos combos combos combos combos combos combos combos combos 

/ {
    combos { //done
        compatible = "zmk,combos";

        combo_pgdn {
            timeout-ms = <175>;
            key-positions = <33 34>;
            layers = <2>;
            bindings = <&kp PG_DN>;
        };
        combo_esc {
            timeout-ms = <175>;
            key-positions = <34 35>;
            layers = <2>;
            bindings = <&kp ESC>;
        };       
        combo_pgup {
            timeout-ms = <175>;
            key-positions = <35 36>;
            layers = <2>;            
            bindings = <&kp PG_UP>;
        };
        combo_esc2 {
            timeout-ms = <175>;
            key-positions = <15 43>;
            bindings = <&kp ESC>;
        };         
        combo_reset {
            timeout-ms = <175>;
            key-positions = <0 11>;
            bindings = <&bootloader>;
        }; 
        combo_under {
            timeout-ms = <175>;
            key-positions = <32 33>;
            bindings = <&kp UNDER>;
        };  
        combo_cbspc {
            timeout-ms = <175>;
            key-positions = <10 11>;
            bindings = <&kp LC(BSPC)>;
        };        
        combo_del {
            timeout-ms = <175>;
            key-positions = <28 29>;
            bindings = <&kp DEL>;
        };     
        combo_ctrlw {
            timeout-ms = <175>;
            key-positions = <1 2>;
            bindings = <&kp LC(W)>;
        };             
        combo_find {
            timeout-ms = <175>;
            key-positions = <15 16>;
            bindings = <&find>;
        };         
        combo_cat {
            timeout-ms = <175>;
            key-positions = <0 1>;
            bindings = <&kp LC(LA(TAB))>;
        };
        combo_copy {
            timeout-ms = <175>;
            key-positions = <26 27>;
            bindings = <&kp LC(C)>;
        };
        combo_paste {
            timeout-ms = <175>;
            key-positions = <27 28>;
            bindings = <&kp LC(V)>;
        };                                  
        combo_cpys {
            timeout-ms = <175>;
            key-positions = <26 27 28>;
            bindings = <&copysp>;
        };
        combo_parn {
            timeout-ms = <175>;
            key-positions = <1 10>;
            bindings = <&macro_tap &kp LPAR &kp RPAR &kp LEFT>;
        };
        combo_soft {
            timeout-ms = <175>;
            key-positions = <9 10 11>;
            bindings = <&soft_off>;
        };

    };
};

//conditional layers conditional layers conditional layers conditional layers conditional layers conditional layers conditional layers conditional layers 

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <2 3>;
            then-layer = <5>;
        };
    };
};

//keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap keymap 

/ {
    keymap {
        compatible = "zmk,keymap";

        0 { //done
            bindings = <
                &kp TAB    &kp Q      &kp W      &kp E      &kp R      &kp T                            &kp Y      &kp U      &kp I      &kp O      &kp P      &kp BSPC
                &kp LSHFT  &asp       &kp S      &kp D      &kp F      &kp G                            &kp H      &kp J      &kp K      &kp L      SLCN       &quot
                &kp LCTRL  &kp Z      &kp X      &kp C      &kp V      &kp B      &trans     &trans     &kp N      &kp M      &kp COMMA  &kp DOT    &slsh      SENT
                &trans     &trans     &trans     &trans    &mo_to 4 0 &mo_to 3 0  &trans     &trans    &lt 2 SPACE &to 2      &none      &none      &none      &none
            >;
        };

        1 { //blank, not used, done
            bindings = <
                &trans     &trans     &trans     &trans     &trans     &trans                           &trans     &trans     &trans     &trans     &trans     &trans
                &trans     &trans     &trans     &trans     &trans     &trans                           &trans     &trans     &trans     &trans     &trans     &trans
                &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans
                &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans                 
            >;
        };

        2 { //mousekeys, done
            bindings = <
                &trans     &trans     &trans     MS_U       &trans     SCR_U                            &trans     &tdltb     COPPST     &tdrtb     &trans     &trans
                &trans     &trans     MS_L       MS_D       MS_R       SCR_D                            &trans     &mkp LCLK  &tdmck     &tdrck     &kp PSCRN  &trans
                &trans     &trans     &trans     &trans     &trans     &dashm     &trans     &trans     &kp PG_UP  &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &trans
                &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans                 
            >;
        };        

        3 { //numpad & f-row, done
            bindings = <
                &kp F1     &kp F2     &kp F3     &kp F4     &kp F5     &kp F6                           &trans     &kp N7     &kp N8     &kp N9     &kp MINUS  &trans
                &kp F7     &kp F8     &kp F9     &kp F10    &kp F11    &kp F12                          &trans     &kp N4     &kp N5     &kp N6     &kp PLUS   &trans
                &trans     &trans     &trans     &trans     &trans     &dashm     &trans     &trans     &trans     &kp N1     &kp N2     &kp N3     &kp EQUAL  &trans
                &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &kp N0     &kp N0     &trans     &trans     &trans     &trans     
            >;
        };

        4 { //symbols, done
            bindings = <
                CAT        &tdlpar    &trans     CAD        &trans     &trans                           &trans     &kp CAPS   &kp SLCK   &trans     &tdrpar    &trans
                &kp TILDE  &kp EXCL   &kp AT     &kp HASH   &kp DLLR &kp PRCNT                          &kp CARET  &kp AMPS   &kp ASTRK  &trans     &trans     &trans
                &trans     &trans     &trans     &trans     &trans     &dashm     &trans     &trans     &trans     &trans     &trans     &kp LG(DOT) &trans    &kp LA(ENTER)
                &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans
            >;
        };

        5 { //BT config, done
            bindings = <
                &trans     &trans     &trans     &trans     &trans     &trans                           &bt BT_NXT &out OUT_BLE &out OUT_USB &trans     &trans     &soft_off
                &trans     &trans     &trans     &trans     &trans     &trans                           &bt BT_CLR &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &trans &trans
                &trans     &trans &kp C_VOL_DN &kp C_VOL_UP &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans
                &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans
            >;
        };
    };
};